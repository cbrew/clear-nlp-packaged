#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TDepNode:
  """
  the thrift representation of a single node

  Attributes:
   - id
   - word
   - lemma
   - pos
   - feats
   - headId
   - deprel
   - sheads
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'word', None, None, ), # 2
    (3, TType.STRING, 'lemma', None, None, ), # 3
    (4, TType.STRING, 'pos', None, None, ), # 4
    (5, TType.STRING, 'feats', None, None, ), # 5
    (6, TType.STRING, 'headId', None, None, ), # 6
    (7, TType.STRING, 'deprel', None, None, ), # 7
    (8, TType.STRING, 'sheads', None, None, ), # 8
  )

  def __init__(self, id=None, word=None, lemma=None, pos=None, feats=None, headId=None, deprel=None, sheads=None,):
    self.id = id
    self.word = word
    self.lemma = lemma
    self.pos = pos
    self.feats = feats
    self.headId = headId
    self.deprel = deprel
    self.sheads = sheads

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.word = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lemma = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pos = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.feats = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.headId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.deprel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.sheads = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDepNode')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.word is not None:
      oprot.writeFieldBegin('word', TType.STRING, 2)
      oprot.writeString(self.word)
      oprot.writeFieldEnd()
    if self.lemma is not None:
      oprot.writeFieldBegin('lemma', TType.STRING, 3)
      oprot.writeString(self.lemma)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRING, 4)
      oprot.writeString(self.pos)
      oprot.writeFieldEnd()
    if self.feats is not None:
      oprot.writeFieldBegin('feats', TType.STRING, 5)
      oprot.writeString(self.feats)
      oprot.writeFieldEnd()
    if self.headId is not None:
      oprot.writeFieldBegin('headId', TType.STRING, 6)
      oprot.writeString(self.headId)
      oprot.writeFieldEnd()
    if self.deprel is not None:
      oprot.writeFieldBegin('deprel', TType.STRING, 7)
      oprot.writeString(self.deprel)
      oprot.writeFieldEnd()
    if self.sheads is not None:
      oprot.writeFieldBegin('sheads', TType.STRING, 8)
      oprot.writeString(self.sheads)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
