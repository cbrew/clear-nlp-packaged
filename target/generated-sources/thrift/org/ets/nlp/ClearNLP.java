/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ets.nlp;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClearNLP {

  public interface Iface {

    public List<List<TDepNode>> labelString(String inString) throws org.apache.thrift.TException;

    public List<List<TDepNode>> labelFile(String inFile) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void labelString(String inString, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.labelString_call> resultHandler) throws org.apache.thrift.TException;

    public void labelFile(String inFile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.labelFile_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<TDepNode>> labelString(String inString) throws org.apache.thrift.TException
    {
      send_labelString(inString);
      return recv_labelString();
    }

    public void send_labelString(String inString) throws org.apache.thrift.TException
    {
      labelString_args args = new labelString_args();
      args.setInString(inString);
      sendBase("labelString", args);
    }

    public List<List<TDepNode>> recv_labelString() throws org.apache.thrift.TException
    {
      labelString_result result = new labelString_result();
      receiveBase(result, "labelString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "labelString failed: unknown result");
    }

    public List<List<TDepNode>> labelFile(String inFile) throws org.apache.thrift.TException
    {
      send_labelFile(inFile);
      return recv_labelFile();
    }

    public void send_labelFile(String inFile) throws org.apache.thrift.TException
    {
      labelFile_args args = new labelFile_args();
      args.setInFile(inFile);
      sendBase("labelFile", args);
    }

    public List<List<TDepNode>> recv_labelFile() throws org.apache.thrift.TException
    {
      labelFile_result result = new labelFile_result();
      receiveBase(result, "labelFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "labelFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void labelString(String inString, org.apache.thrift.async.AsyncMethodCallback<labelString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      labelString_call method_call = new labelString_call(inString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class labelString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inString;
      public labelString_call(String inString, org.apache.thrift.async.AsyncMethodCallback<labelString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inString = inString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("labelString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        labelString_args args = new labelString_args();
        args.setInString(inString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<TDepNode>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_labelString();
      }
    }

    public void labelFile(String inFile, org.apache.thrift.async.AsyncMethodCallback<labelFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      labelFile_call method_call = new labelFile_call(inFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class labelFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inFile;
      public labelFile_call(String inFile, org.apache.thrift.async.AsyncMethodCallback<labelFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inFile = inFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("labelFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        labelFile_args args = new labelFile_args();
        args.setInFile(inFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<TDepNode>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_labelFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("labelString", new labelString());
      processMap.put("labelFile", new labelFile());
      return processMap;
    }

    public static class labelString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, labelString_args> {
      public labelString() {
        super("labelString");
      }

      public labelString_args getEmptyArgsInstance() {
        return new labelString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public labelString_result getResult(I iface, labelString_args args) throws org.apache.thrift.TException {
        labelString_result result = new labelString_result();
        result.success = iface.labelString(args.inString);
        return result;
      }
    }

    public static class labelFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, labelFile_args> {
      public labelFile() {
        super("labelFile");
      }

      public labelFile_args getEmptyArgsInstance() {
        return new labelFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public labelFile_result getResult(I iface, labelFile_args args) throws org.apache.thrift.TException {
        labelFile_result result = new labelFile_result();
        result.success = iface.labelFile(args.inFile);
        return result;
      }
    }

  }

  public static class labelString_args implements org.apache.thrift.TBase<labelString_args, labelString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("labelString_args");

    private static final org.apache.thrift.protocol.TField IN_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("inString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new labelString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new labelString_argsTupleSchemeFactory());
    }

    public String inString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_STRING((short)1, "inString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_STRING
            return IN_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_STRING, new org.apache.thrift.meta_data.FieldMetaData("inString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(labelString_args.class, metaDataMap);
    }

    public labelString_args() {
    }

    public labelString_args(
      String inString)
    {
      this();
      this.inString = inString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public labelString_args(labelString_args other) {
      if (other.isSetInString()) {
        this.inString = other.inString;
      }
    }

    public labelString_args deepCopy() {
      return new labelString_args(this);
    }

    @Override
    public void clear() {
      this.inString = null;
    }

    public String getInString() {
      return this.inString;
    }

    public labelString_args setInString(String inString) {
      this.inString = inString;
      return this;
    }

    public void unsetInString() {
      this.inString = null;
    }

    /** Returns true if field inString is set (has been assigned a value) and false otherwise */
    public boolean isSetInString() {
      return this.inString != null;
    }

    public void setInStringIsSet(boolean value) {
      if (!value) {
        this.inString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_STRING:
        if (value == null) {
          unsetInString();
        } else {
          setInString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_STRING:
        return getInString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_STRING:
        return isSetInString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof labelString_args)
        return this.equals((labelString_args)that);
      return false;
    }

    public boolean equals(labelString_args that) {
      if (that == null)
        return false;

      boolean this_present_inString = true && this.isSetInString();
      boolean that_present_inString = true && that.isSetInString();
      if (this_present_inString || that_present_inString) {
        if (!(this_present_inString && that_present_inString))
          return false;
        if (!this.inString.equals(that.inString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_inString = true && (isSetInString());
      builder.append(present_inString);
      if (present_inString)
        builder.append(inString);

      return builder.toHashCode();
    }

    public int compareTo(labelString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      labelString_args typedOther = (labelString_args)other;

      lastComparison = Boolean.valueOf(isSetInString()).compareTo(typedOther.isSetInString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inString, typedOther.inString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("labelString_args(");
      boolean first = true;

      sb.append("inString:");
      if (this.inString == null) {
        sb.append("null");
      } else {
        sb.append(this.inString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class labelString_argsStandardSchemeFactory implements SchemeFactory {
      public labelString_argsStandardScheme getScheme() {
        return new labelString_argsStandardScheme();
      }
    }

    private static class labelString_argsStandardScheme extends StandardScheme<labelString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, labelString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inString = iprot.readString();
                struct.setInStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, labelString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inString != null) {
          oprot.writeFieldBegin(IN_STRING_FIELD_DESC);
          oprot.writeString(struct.inString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class labelString_argsTupleSchemeFactory implements SchemeFactory {
      public labelString_argsTupleScheme getScheme() {
        return new labelString_argsTupleScheme();
      }
    }

    private static class labelString_argsTupleScheme extends TupleScheme<labelString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, labelString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInString()) {
          oprot.writeString(struct.inString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, labelString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inString = iprot.readString();
          struct.setInStringIsSet(true);
        }
      }
    }

  }

  public static class labelString_result implements org.apache.thrift.TBase<labelString_result, labelString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("labelString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new labelString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new labelString_resultTupleSchemeFactory());
    }

    public List<List<TDepNode>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "TDepTree"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(labelString_result.class, metaDataMap);
    }

    public labelString_result() {
    }

    public labelString_result(
      List<List<TDepNode>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public labelString_result(labelString_result other) {
      if (other.isSetSuccess()) {
        List<List<TDepNode>> __this__success = new ArrayList<List<TDepNode>>();
        for (List<TDepNode> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public labelString_result deepCopy() {
      return new labelString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<TDepNode>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<TDepNode> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<TDepNode>>();
      }
      this.success.add(elem);
    }

    public List<List<TDepNode>> getSuccess() {
      return this.success;
    }

    public labelString_result setSuccess(List<List<TDepNode>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<TDepNode>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof labelString_result)
        return this.equals((labelString_result)that);
      return false;
    }

    public boolean equals(labelString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(labelString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      labelString_result typedOther = (labelString_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("labelString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class labelString_resultStandardSchemeFactory implements SchemeFactory {
      public labelString_resultStandardScheme getScheme() {
        return new labelString_resultStandardScheme();
      }
    }

    private static class labelString_resultStandardScheme extends StandardScheme<labelString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, labelString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<List<TDepNode>>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    List<TDepNode> _elem2; // required
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem2 = new ArrayList<TDepNode>(_list3.size);
                      for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                      {
                        TDepNode _elem5; // required
                        _elem5 = new TDepNode();
                        _elem5.read(iprot);
                        _elem2.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, labelString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<TDepNode> _iter6 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter6.size()));
                for (TDepNode _iter7 : _iter6)
                {
                  _iter7.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class labelString_resultTupleSchemeFactory implements SchemeFactory {
      public labelString_resultTupleScheme getScheme() {
        return new labelString_resultTupleScheme();
      }
    }

    private static class labelString_resultTupleScheme extends TupleScheme<labelString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, labelString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<TDepNode> _iter8 : struct.success)
            {
              {
                oprot.writeI32(_iter8.size());
                for (TDepNode _iter9 : _iter8)
                {
                  _iter9.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, labelString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<TDepNode>>(_list10.size);
            for (int _i11 = 0; _i11 < _list10.size; ++_i11)
            {
              List<TDepNode> _elem12; // required
              {
                org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem12 = new ArrayList<TDepNode>(_list13.size);
                for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                {
                  TDepNode _elem15; // required
                  _elem15 = new TDepNode();
                  _elem15.read(iprot);
                  _elem12.add(_elem15);
                }
              }
              struct.success.add(_elem12);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class labelFile_args implements org.apache.thrift.TBase<labelFile_args, labelFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("labelFile_args");

    private static final org.apache.thrift.protocol.TField IN_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("inFile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new labelFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new labelFile_argsTupleSchemeFactory());
    }

    public String inFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_FILE((short)1, "inFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_FILE
            return IN_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_FILE, new org.apache.thrift.meta_data.FieldMetaData("inFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(labelFile_args.class, metaDataMap);
    }

    public labelFile_args() {
    }

    public labelFile_args(
      String inFile)
    {
      this();
      this.inFile = inFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public labelFile_args(labelFile_args other) {
      if (other.isSetInFile()) {
        this.inFile = other.inFile;
      }
    }

    public labelFile_args deepCopy() {
      return new labelFile_args(this);
    }

    @Override
    public void clear() {
      this.inFile = null;
    }

    public String getInFile() {
      return this.inFile;
    }

    public labelFile_args setInFile(String inFile) {
      this.inFile = inFile;
      return this;
    }

    public void unsetInFile() {
      this.inFile = null;
    }

    /** Returns true if field inFile is set (has been assigned a value) and false otherwise */
    public boolean isSetInFile() {
      return this.inFile != null;
    }

    public void setInFileIsSet(boolean value) {
      if (!value) {
        this.inFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_FILE:
        if (value == null) {
          unsetInFile();
        } else {
          setInFile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_FILE:
        return getInFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_FILE:
        return isSetInFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof labelFile_args)
        return this.equals((labelFile_args)that);
      return false;
    }

    public boolean equals(labelFile_args that) {
      if (that == null)
        return false;

      boolean this_present_inFile = true && this.isSetInFile();
      boolean that_present_inFile = true && that.isSetInFile();
      if (this_present_inFile || that_present_inFile) {
        if (!(this_present_inFile && that_present_inFile))
          return false;
        if (!this.inFile.equals(that.inFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_inFile = true && (isSetInFile());
      builder.append(present_inFile);
      if (present_inFile)
        builder.append(inFile);

      return builder.toHashCode();
    }

    public int compareTo(labelFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      labelFile_args typedOther = (labelFile_args)other;

      lastComparison = Boolean.valueOf(isSetInFile()).compareTo(typedOther.isSetInFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inFile, typedOther.inFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("labelFile_args(");
      boolean first = true;

      sb.append("inFile:");
      if (this.inFile == null) {
        sb.append("null");
      } else {
        sb.append(this.inFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class labelFile_argsStandardSchemeFactory implements SchemeFactory {
      public labelFile_argsStandardScheme getScheme() {
        return new labelFile_argsStandardScheme();
      }
    }

    private static class labelFile_argsStandardScheme extends StandardScheme<labelFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, labelFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inFile = iprot.readString();
                struct.setInFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, labelFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inFile != null) {
          oprot.writeFieldBegin(IN_FILE_FIELD_DESC);
          oprot.writeString(struct.inFile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class labelFile_argsTupleSchemeFactory implements SchemeFactory {
      public labelFile_argsTupleScheme getScheme() {
        return new labelFile_argsTupleScheme();
      }
    }

    private static class labelFile_argsTupleScheme extends TupleScheme<labelFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, labelFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInFile()) {
          oprot.writeString(struct.inFile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, labelFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inFile = iprot.readString();
          struct.setInFileIsSet(true);
        }
      }
    }

  }

  public static class labelFile_result implements org.apache.thrift.TBase<labelFile_result, labelFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("labelFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new labelFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new labelFile_resultTupleSchemeFactory());
    }

    public List<List<TDepNode>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "TDepTree"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(labelFile_result.class, metaDataMap);
    }

    public labelFile_result() {
    }

    public labelFile_result(
      List<List<TDepNode>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public labelFile_result(labelFile_result other) {
      if (other.isSetSuccess()) {
        List<List<TDepNode>> __this__success = new ArrayList<List<TDepNode>>();
        for (List<TDepNode> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public labelFile_result deepCopy() {
      return new labelFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<TDepNode>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<TDepNode> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<TDepNode>>();
      }
      this.success.add(elem);
    }

    public List<List<TDepNode>> getSuccess() {
      return this.success;
    }

    public labelFile_result setSuccess(List<List<TDepNode>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<TDepNode>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof labelFile_result)
        return this.equals((labelFile_result)that);
      return false;
    }

    public boolean equals(labelFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(labelFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      labelFile_result typedOther = (labelFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("labelFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class labelFile_resultStandardSchemeFactory implements SchemeFactory {
      public labelFile_resultStandardScheme getScheme() {
        return new labelFile_resultStandardScheme();
      }
    }

    private static class labelFile_resultStandardScheme extends StandardScheme<labelFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, labelFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<List<TDepNode>>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    List<TDepNode> _elem18; // required
                    {
                      org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                      _elem18 = new ArrayList<TDepNode>(_list19.size);
                      for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                      {
                        TDepNode _elem21; // required
                        _elem21 = new TDepNode();
                        _elem21.read(iprot);
                        _elem18.add(_elem21);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, labelFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<TDepNode> _iter22 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter22.size()));
                for (TDepNode _iter23 : _iter22)
                {
                  _iter23.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class labelFile_resultTupleSchemeFactory implements SchemeFactory {
      public labelFile_resultTupleScheme getScheme() {
        return new labelFile_resultTupleScheme();
      }
    }

    private static class labelFile_resultTupleScheme extends TupleScheme<labelFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, labelFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<TDepNode> _iter24 : struct.success)
            {
              {
                oprot.writeI32(_iter24.size());
                for (TDepNode _iter25 : _iter24)
                {
                  _iter25.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, labelFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<TDepNode>>(_list26.size);
            for (int _i27 = 0; _i27 < _list26.size; ++_i27)
            {
              List<TDepNode> _elem28; // required
              {
                org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem28 = new ArrayList<TDepNode>(_list29.size);
                for (int _i30 = 0; _i30 < _list29.size; ++_i30)
                {
                  TDepNode _elem31; // required
                  _elem31 = new TDepNode();
                  _elem31.read(iprot);
                  _elem28.add(_elem31);
                }
              }
              struct.success.add(_elem28);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
